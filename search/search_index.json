{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>This is the Landing Page for the Documentation.</p>"},{"location":"RoadRunner/","title":"RoadRunner","text":"<p>This is the RoadRunner documentation Page.</p>"},{"location":"RoadRunner/create_the_linux_boot_image/","title":"Create the linux boot image","text":""},{"location":"RoadRunner/create_the_linux_boot_image/#download-binary-images-for-roadrunner-som","title":"Download binary images for RoadRunner SOM","text":"Image caption"},{"location":"RoadRunner/create_the_linux_boot_image/#kernel-linux-51568-debian-bullseye-115-at91boostrap-404","title":"Kernel Linux 5.15.68 - Debian Bullseye 11.5 - At91boostrap 4.0.4","text":"<p>Download</p> <p>MD5SUM: 6f30451497fd9230f5263311009805c9</p> <p>It is possible to generate a bootable microSD from this image using Balena Etcher on any platform.</p> <p>At prompt via debug port interface or via lan using SSH the login data are:</p> <pre><code>login: acme\nPassword: acmesystems\n</code></pre> <p>Note</p> <p>To extend the rootfs partition to fill the whole microSD size type:</p> <pre><code>sudo ./extend_rootfs.sh\n</code></pre> <p>The password for the root user is not defined. To set it log in as acme user and type:</p> <pre><code>sudo passwd\n</code></pre>"},{"location":"RoadRunner/create_the_linux_boot_image/#compiling-at91bootstrap-404","title":"Compiling AT91bootstrap 4.0.4","text":""},{"location":"etc/declarations_of_conformity/","title":"Declarations of conformity","text":"<p>Long term availibility</p> <p>RoHS Declaration of conformity 2021</p>"},{"location":"examples/","title":"Examples","text":"<p>This is the Examples Lading Page.</p>"},{"location":"examples/code/","title":"Code","text":""},{"location":"examples/code/#shell","title":"Shell","text":"<pre><code>$ echo $EDITOR\nvim\n$ git checkout main\nSwitched to branch 'main'\nYour branch is up-to-date with 'origin/main'.\n$ git push\nEverything up-to-date\n$ echo 'All\n&gt; done!'\nAll\ndone!\n</code></pre> <pre><code>def main():\npass\n</code></pre>"},{"location":"examples/graphs/","title":"Graphs","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> CC++Python <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <pre><code>import matplotlib\ndef main():\nreturn 0\n</code></pre> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]"},{"location":"examples/math/","title":"Maths","text":"\\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] \\[ E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j \\] \\[3 &lt; 4\\] \\[\\begin{align} p(v*i=1|\\mathbf{h}) &amp; = \\sigma\\left(\\sum_j w*{ij}h*j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) &amp; = \\sigma\\left(\\sum_i w*{ij}v_i + c_j\\right) \\end{align}\\]"},{"location":"h10/","title":"H10","text":"<p>This is the H10 documentation Page.</p>"},{"location":"h10/mechanical/","title":"Mechanical","text":""},{"location":"h10/mechanical/#dimensions","title":"Dimensions","text":"<p>To Download the Dimension of the H10 Board.</p> <p>Download</p>"},{"location":"h10/mechanical/#som-step-model","title":"SOM step model","text":"<p>To Download the SOM Step Model of the H10 Board.</p> <p>Download</p>"},{"location":"h10/pcb_reference/","title":"PCB Reference","text":"<p>For Altium Component SCH: Download</p> <p>For Altium Component PCB: Download</p>"},{"location":"h10/pinout/","title":"Pinout H10 Board","text":"<p>This is the Pinout of the H10 Board.</p> <p> </p> Pinout","tags":["H10","pinout"]},{"location":"h10/software_reference/","title":"Software References","text":""},{"location":"h10/software_reference/#riot-os","title":"RIOT OS","text":"<p>RIOT is an open source real-time multi-threading operating system for IoT devices.</p> <p>For the RIOT-OS Github Page: RIOT-OS Repo</p>"}]}